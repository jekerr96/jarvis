let numberMap = [
    ["сто|сотое", 100],

    ["двадцать|двадцатое", 20],
    ["тридцать|тридцатое", 30],
    ["сорок|сороковое", 40],
    ["пятьдесят|пятидесятое", 50],
    ["шестьдесят|шестидесятое", 60],
    ["семьдесят|семидесятое", 70],
    ["восемьдесят|восьмидесятое", 80],
    ["девяносто|девяностое", 90],

    ["один|первое", 1],
    ["два|второе", 2],
    ["три|третье", 3],
    ["четыре|четвертое", 4],
    ["пять|пятое", 5],
    ["шесть|шестое", 6],
    ["семь|седьмое", 7],
    ["восемь|восьмое", 8],
    ["девять|девятое", 9],
    ["десять|десятое", 10],
    ["одинадцать|одинадцатое", 11],
    ["двенадцать|двенадцатое", 12],
    ["тринадцать|тринадцатое", 13],
    ["четыренадцать|четырнадцатое", 14],
    ["пятнадцать|пятнадцатое", 15],
    ["шеснадцать|шеснадцатое", 16],
    ["семнадцать|семнадцатое", 17],
    ["весемнадцать|восемнадцатое", 18],
    ["девятцадцать|девятнадцатое", 19],

];

function convertNumbers(string) {
    for (let [strNumber, number] of numberMap) {
        let regExp = new RegExp(strNumber, "i");
        string = string.replace(regExp, number + "&");
    }

    let regExp = new RegExp("([0-9]+&( |$))+", "g");
    string = string.replaceAll(regExp, (match) => {
        let numbers = match.split("&").map((item) => item.trim());

        return numbers.reduce((accumulator, item) => {
            return (item ? Number(item) : 0) + Number(accumulator);
        }) + " ";
    }).trim();

    return string;
}